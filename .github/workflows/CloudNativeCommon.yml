# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Release Common

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
   
jobs:
  build:
    env:
      BUILD_CONFIG: 'Release'
      SOLUTION: 'src/Common/Com.CloudNative.Common/Com.CloudNative.Common.sln'
      AZURE_ARTIFACTS_FEED_URL: https://timcyspet.pkgs.visualstudio.com/_packaging/timcyspet/nuget/v3/index.json 
      VERSION: '1.0.0'
      BUILD_NUMBER: $GITHUB_RUN_NUMBER

    runs-on: ubuntu-latest
   
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Restore dependencies
      run: nuget restore $SOLUTION
      
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
    - name: echo version
      run: echo building $BUILD_NUMBER >>  $GITHUB_OUTPUT
      
    - name: Build
      run: dotnet build $SOLUTION --configuration $BUILD_CONFIG /p:Version=${VERSION} --no-restore
      
    #- name: Test
    # run: dotnet test -c Release --no-build
      
    #- name: Pack nugets
    #  run: dotnet pack -c Release --no-build --output .
    #- name: Push to NuGet
    #  run: dotnet nuget push **\*.nupkg --api-key ${{secrets.nuget_api_key}} --source https://api.nuget.org/v3/index.json
